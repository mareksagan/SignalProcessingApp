Brief Documentation And The Class Description For The SignalProcessingApp Project

Deployment Instructions:
Before trying to run the project, please, install this: https://www.eltima.com/download/vspd.exe
Go to the "Manage ports" tab and choose "COM99" in "First port:" and "COM100" in "Second port:".
Feel free to change the COM ports if you like, but then you need to change them
in the SignalGenerator/SignalReader's constructor as well (or just set the portName property
of those classes and restart the connection). Finally, click the "Add Pair" button and start the application.

Description:
The user picks the generated signal kind in GUI (RadioButtons).
The signal gets generated by a SignalGenerator instance, which
sends the signal via a virtual COM port. At the same time, the GUI
utilises the SignalReader class instance to read the values from the paired COM port.
The values are displayed in real time on a scrollable plot.

Used Technologies And Programming Techniques:
* Windows Presentation Foundation
* XAML
* Model-View-ViewModel design pattern (MVVM Light, Command, Data Binding)
* Singleton design pattern
* Factory design pattern
* Facade design pattern
* Multithreaded programming
* Serial ports communication (virtual COM ports via Eltima Virtual Serial Port Driver)
* Inversion of Control (SimpleIoc)
* Classical Dependency Injection
* OxyPlot (PlotModel, real-time plotting)
* Interfaces
* Lambda expressions
* Delegates
* Version control (Git for Visual Studio)
* JetBrains ReSharper

ISignalManipulator Interface Description:
* SerialPort Port { get; set; }
Class instance used for handling serial port IO operations
* String PortName { get; set; }
Property describing the used serial port's name
* void OpenConnection();
A wrapper method which opens the connection with the specified serial port
* void CloseConnection();
A wrapper method which closes the connection with the specified serial port

SignalGenerator Class Description:
* public int SampleRate { get; set; }
Sample rate variable used for signal generation
* public double Amplitude { get; set; }
Amplitude variable used for signal generation
* public double Frequency { get; set; }
Frequency variable used for signal generation
* private int time { get; set; }
Property indicating the number of serial port IO operations, used for signal generation (concept of flowing time)
* private Func<double> Signal { get; set; }
A delegate describing the mathematical function currently used for signal generation
* public SerialPort Port { get; set; }
Class instance used for handling serial port IO operations
* public String PortName { get; set; }
Property describing the used serial port's name
* private static readonly SignalGenerator Instance
A property used to implement the Singleton design pattern.
Indicates if there is only an existing instance of the class.
* public static SignalGenerator GetSignalGenerator()
A factory method for the SignalGenerator class
* public void OpenConnection()
A wrapper method which opens the connection with the specified serial port
* public void CloseConnection()
A wrapper method which closes the connection with the specified serial port
* private void GenerateSignal()
Runs the thread which continuously generates the signal to the specified serial port
* public void SetSine()
Sets the signal delegate to a sine function
* public void SetTriangular()
Sets the signal delegate to a triangular function
* public void SetSquare()
Sets the signal delegate to a square function

SignalReader Class Description:
* public SerialPort Port { get; set; }
Class instance used for handling serial port IO operations
* public String PortName { get; set; }
Property describing the used serial port's name
* private static readonly SignalReader Instance
A property used to implement the Singleton design pattern.
Indicates if there is only an existing instance of the class.
* public static SignalReader GetSignalReader()
A factory method for the SignalReader class
* public double ReadValue()
Reads a value from the specified serial port
* public void OpenConnection()
A wrapper method which opens the connection with the specified serial port
* public void CloseConnection()
A wrapper method which closes the connection with the specified serial port

MainViewModel Class Description:
* private SignalGenerator SignalGen;
An instance of the SignalGenerator class
* private SignalReader SignalRed;
An instance of the SignalReader class
* private SignalGenerator StartSignalGenerator()
A wrapper method lazy instantiating an object of the SignalGenerator class
* private SignalReader StartSignalReader()
A wrapper method lazy instantiating an object of the SignalReader class
* public void ReadAndPlot(SerialPort ReadingPort)
Listens to the specified serial port in a separate thread and adds new datapoints to the plot while refreshing it
* public PlotModel PlotModel { get; private set; }
A class used for an easier access to the plot properties
* public int TotalNumberOfPoints { get; private set; }
A property describing the number of total points on the plot
* public RelayCommand SineRadioButtonCommand { get; set; }
A Command bound to the SineRadioButton
* public RelayCommand TriangularRadioButtonCommand { get; set; }
A Command bound to the TriangularRadioButton
* public RelayCommand SquareRadioButtonCommand { get; set; }
A Command bound to the SquareRadioButton
* public void Sine()
A method invoked by the SineRadioButtonCommand
* public void Triangular()
A method invoked by the TriangularRadioButtonCommand
* public void Square()
A method invoked by the SquareRadioButtonCommand