namespace SignalProcessingApp
{
    /// <summary>
    /// Click here for more details
    /// </summary>
    /// <example>The user picks the generated signal kind in GUI (RadioButtons). <para/>
    /// The signal gets generated by a SignalGenerator instance, which sends the signal via a virtual COM port. <para/>
    /// At the same time, the ViewModel utilises the SignalReader class instance to read the values from the paired COM port. <para/>
    /// The values are displayed in real time on a scrollable plot.
    /// </example>
    /// <remarks>
    /// Before you run the project, please, install this: https://www.eltima.com/download/vspd.exe <para/>
    /// Go to the "Manage ports" tab and choose "COM99" in "First port:" and "COM100" in "Second port:". <para/>
    /// You can change the default COM ports in the SignalGenerator/SignalReader's constructor/portName property and restart the connection. <para/>
    /// Finally, click the "Add Pair" button and start the application. <para/><para/>
    /// Used technologies and programming techniques: <para/>
    /// Windows Presentation Foundation <para/>
    /// XAML <para/>
    /// Model-View-ViewModel design pattern (MVVM Light, Command, Data Binding) <para/>
    /// Singleton design pattern <para/>
    /// Factory design pattern <para/>
    /// Facade design pattern <para/>
    /// Multithreaded programming <para/>
    /// Serial ports communication (virtual COM ports via Eltima Virtual Serial Port Driver) <para/>
    /// Inversion of Control (SimpleIoc) <para/>
    /// OxyPlot (PlotModel, real-time plotting) <para/>
    /// Interfaces <para/>
    /// Lambda expressions <para/>
    /// Delegates <para/>
    /// Version control (Git for Visual Studio) <para/>
    /// JetBrains Resharper <para/>
    /// C# Documenter (XML) <para/>
    /// Sandcastle (Website)
    /// </remarks>
    class NamespaceDoc
    {
    }
}
